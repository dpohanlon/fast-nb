name: Build and Publish Wheels

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - main

jobs:
  build_wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        #, macos-13, macos-14]
        python-version: ["3.13"]
        #, "3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          git submodule update --init --recursive
          python -m pip install --upgrade pip

      - name: Install dependencies Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt install python3-dev
          sudo apt install libboost-all-dev
          sudo apt install libeigen3-dev

      - name: Install dependencies Mac
        if: runner.os == 'macOS'
        run: |
          brew install eigen
          brew install libomp
          brew install boost
          echo "OpenMP_ROOT=$(brew --prefix)/opt/libomp" >> $GITHUB_ENV

      # Make sure we're only building wheels for the OS version we're on
      - name: Set macOS deployment target
        if: runner.os == 'macOS'
        run: echo "MACOSX_DEPLOYMENT_TARGET=$(sw_vers -productVersion | cut -d '.' -f 1-2)" >> $GITHUB_ENV

      - name: Build wheels with cibuildwheel
        uses: pypa/cibuildwheel@v2.22.0
        with:
          output-dir: wheelhouse
        env:
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_SKIP: "*musllinux*"
          OpenMP_ROOT: ${{ env.OpenMP_ROOT }}
          CIBW_BEFORE_ALL_LINUX: >
            yum install -y boost-devel &&
            yum install -y eigen3-devel &&
            yum install -y python3-devel

      - name: Run Tests
        run: |
          pip install wheelhouse/*.whl
          pip install nose2
          cd tests
          nose2

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
          path: wheelhouse/*.whl

  release:
    needs: [build_wheels]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags')

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist/
          merge-multiple: true
      - name: Create Release and Upload Assets
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          artifacts: dist/*
          artifactContentType: application/gzip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    needs: [build_wheels]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist/
          merge-multiple: true
      - name: Publish to test PyPI
        if: ${{!startsWith(github.ref, 'refs/tags')}}
        uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
      - name: Publish tagged version to PyPI
        if: startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
